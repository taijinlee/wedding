{
  "name": "es5-ext",
  "version": "0.7.1",
  "description": "ECMAScript5 extensions",
  "keywords": [
    "ecmascript",
    "ecmascript5",
    "es5",
    "extensions",
    "ext",
    "addons",
    "extras",
    "javascript"
  ],
  "author": {
    "name": "Mariusz Nowak",
    "email": "medikoo+es5-ext@medikoo.com",
    "url": "http://www.medikoo.com/"
  },
  "main": "lib",
  "repository": {
    "type": "git",
    "url": "git://github.com/medikoo/es5-ext.git"
  },
  "bugs": {
    "mail": "medikoo+es5-ext@medikoo.com",
    "url": "https://github.com/medikoo/es5-ext/issues"
  },
  "engines": {
    "node": ">=0.1.103"
  },
  "scripts": {
    "test": "node ./node_modules/tad/bin/tad lib"
  },
  "devDependencies": {
    "tad": "0.1.x"
  },
  "licence": "MIT",
  "readme": "# es5-ext - ECMAScript5 extensions\n\nMethods, functions and objects that are not part of the standard, written with\nEcmaScript conventions in mind.\n\n## Installation\n\nCan be used in any environment that implements EcmaScript 5th edition.  \nMany extensions will also work with ECMAScript 3rd edition, if they're not let [es5-shim](https://github.com/kriskowal/es5-shim) be your aid.\n\nTo use it with node.js:\n\n\t$ npm install es5-ext\n\nFor browser, you can easily create custom toolset with help of\n[modules-webmake](https://github.com/medikoo/modules-webmake)\n\n## Usage\n\n__es5-ext__ mostly offer methods (not functions) which can directly be\nassigned to native object's prototype:\n\n\tFunction.prototype.curry = require('es5-ext/lib/Function/prototype/curry');\n\n\tArray.prototype.flatten = require('es5-ext/lib/Array/prototype/flatten');\n\n\tString.prototype.startsWith = require('es5-ext/lib/String/prototype/starts-with');\n\nHowever, extending native prototypes is controversial and in general discouraged,\nmost will agree that __it's ok only if we own the context__ (see\n[extending-javascript-natives](http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/)\nfor more views on that matter).  \nSo when you don't want to extend native prototypes you can use methods as\nfunctions:\n\n\tvar util = {};\n\tvar call = Function.prototype.call;\n\n\tutil.curry = call.bind(require('es5-ext/lib/Function/prototype/curry'));\n\n\tutil.flatten = call.bind(require('es5-ext/lib/Array/prototype/flatten'));\n\n\tutil.startsWith = call.bind(require('es5-ext/lib/String/prototype/starts-with'));\n\n### API\n\nAs with native ones most methods are generic and can be run on any object.\nIn more detail:\n\n* `Array.prototype` and `Object.prototype` methods can be run on any object (any\nvalue that's neither _null_ nor _undefined_),\n* `Date.prototype` methods should be called only on `Date` instances.\n* `Function.prototype` methods can be called on any callable objects (not\nnecessarily functions)\n* `Number.prototype` & `String.prototype` methods can be called on any value, in\ncase of Number it it’ll be degraded to number, in case of string it’ll be\ndegraded to string.\n\n_Each extension is documented at begin of its source file._\n\n* `assertNotNull(arg)`\n* `getNextIdGenerator([prefix[, postfix]])`\n* `global`\n* `guid()`\n* `isEqual(arg0, arg1)`\n* `isPrimitive(arg)`\n* `reserved`\n* `toObject(arg)`\n\n#### Array\n\n* `Array.generate(length, fill0[, fill1[, ...]])`\n\n#### Array.prototype\n\n* `Array.prototype.binarySearch(compareFn)`\n* `Array.prototype.clear()`\n* `Array.prototype.commonLeft(list0[, list1[, ...]])`\n* `Array.prototype.compact()`\n* `Array.prototype.contains(searchElement)`\n* `Array.prototype.copy()`\n* `Array.prototype.diff(other)`\n* `Array.prototype.exclusion(list0[, list1[, ...]])`\n* `Array.prototype.find(query[, thisArg])`\n* `Array.prototype.first()`\n* `Array.prototype.firstIndex()`\n* `Array.prototype.flatten()`\n* `Array.prototype.forEachRight(cb[, thisArg])`\n* `Array.prototype.group(cb[, thisArg])`\n* `Array.prototype.indexesOf(searchElement[, fromIndex])`\n* `Array.prototype.intersection(list0[, list1[, ...]])`\n* `Array.prototype.peek()`\n* `Array.prototype.remove(value)`\n* `Array.prototype.someRight(cb[, thisArg])`\n* `Array.prototype.someValue(cb[, thisArg])`\n* `Array.prototype.uniq()`\n\n#### Boolean\n\n* `Boolean.isBoolean(arg)`\n\n#### Date\n\n* `Date.getFormat(pattern)`\n* `Date.isDate(arg)`\n\n#### Date.prototype\n\n* `Date.prototype.copy(date)`\n* `Date.prototype.duration(to)`\n* `Date.prototype.floorDay()`\n* `Date.prototype.floorMonth()`\n* `Date.prototype.floorYear()`\n* `Date.prototype.monthDaysCount()`\n\n#### Error\n\n* `Error.isError(arg)`\n\n##### Error.prototype\n\n* `Error.prototype.throw()`\n\n#### Function\n\n* `Function.arguments([arg0[, arg1[, ...]])`\n* `Function.context()`\n* `Function.i(arg)`\n* `Function.insert(name, value)`\n* `Function.invoke(name[, arg0[, arg1[, ...]]])`\n* `Function.isArguments(arg)`\n* `Function.isFunction(arg)`\n* `Function.k(arg)`\n* `Function.memoize(fn[, length[, resolvers]])`\n* `Function.noop()`\n* `Function.pluck(name)`\n* `Function.remove(name)`\n\n#### Function.prototype\n\n* `Function.prototype.aritize(n)`\n* `Function.prototype.chain(fn0[, fn1[, ...]])`\n* `Function.prototype.curry([arg0[, arg1[, ...])`\n* `Function.prototype.flip()`\n* `Function.prototype.hold([n[, arg0[, arg1[, ...]]]])`\n* `Function.prototype.lock([arg0[, arg1[, ...])`\n* `Function.prototype.log(log)`\n* `Function.prototype.match()`\n* `Function.prototype.ncurry([n[, arg0[, arg1[, ...]])`\n* `Function.prototype.not()`\n* `Function.prototype.rcurry([arg0[, arg1[, ...])`\n* `Function.prototype.rncurry([n[, arg0[, arg1[, ...]])`\n* `Function.prototype.s(fn)`\n* `Function.prototype.silent([arg0[, arg1[, ...])`\n\n#### Number\n\n* `Number.getAutoincrement(start, step)`\n* `Number.getPad(length[, precision])`\n* `Number.isNumber(arg)`\n\n#### Number.prototype\n\n* `Number.prototype.isLessOrEqual(n)`\n* `Number.prototype.isLess(n)`\n* `Number.prototype.subtract(n)`\n\n#### Object\n\n* `Object.assertCallable(arg)`\n* `Object.descriptor`\n* `Object.getCompareBy(name)`\n* `Object.getSet(value)`\n* `Object.isCallable(arg)`\n* `Object.isList(arg)`\n* `Object.isObject(arg)`\n* `Object.isPlainObject(arg)`\n\n#### Object.prototype\n\n* `Object.prototype.bindMethods([context[, source]])`\n* `Object.prototype.clone()`\n* `Object.prototype.compact()`\n* `Object.prototype.compare(arg)`\n* `Object.prototype.copy([deep])`\n* `Object.prototype.count()`\n* `Object.prototype.diff(arg)`\n* `Object.prototype.empty()`\n* `Object.prototype.every(cb[, thisArg[, compareFn[, byKeys]]])`\n* `Object.prototype.extend([properties])`\n* `Object.prototype.filter(cb[, thisArg])`\n* `Object.prototype.flatten()`\n* `Object.prototype.forEach(cb[, thisArg[, compareFn[, byKeys]]])`\n* `Object.prototype.getPropertyNames()`\n* `Object.prototype.get(key)`\n* `Object.prototype.isDuplicate(arg)`\n* `Object.prototype.isEmpty()`\n* `Object.prototype.keyOf(searchValue)`\n* `Object.prototype.map(cb[, thisArg])`\n* `Object.prototype.mapKeys(cb[, thisArg[, compareFn[, byKeys]]])`\n* `Object.prototype.mapToArray([cb[, thisArg[, compareFn[, byKeys]]]])`\n* `Object.prototype.merge(arg)`\n* `Object.prototype.mergeProperties(arg)`\n* `Object.prototype.override(properties)`\n* `Object.prototype.plainCreate([properties])`\n* `Object.prototype.plainExtend([properties])`\n* `Object.prototype.set(key, value)`\n* `Object.prototype.slice(start[, end[, compareFn[, byKeys]]])`\n* `Object.prototype.some(cb[, thisArg[, compareFn[, byKeys]]])`\n* `Object.prototype.toArray()`\n* `Object.prototype.unset(key)`\n* `Object.prototype.values()`\n\n#### RegExp\n\n* `RegExp.isRegExp(arg)`\n\n#### String\n\n* `String.getFormat(map)`\n* `String.getIndent(indentString)`\n* `String.getPad(fill[, n])`\n* `String.getPrefixWith(prefix)`\n* `String.isString(arg)`\n\n#### String.prototype\n\n* `String.prototype.caseInsensitiveCompare(str)`\n* `String.prototype.contains(searchString)`\n* `String.prototype.dashToCamelCase()`\n* `String.prototype.endsWith()`\n* `String.prototype.isNumeric()`\n* `String.prototype.repeat()`\n* `String.prototype.startsWith()`\n* `String.prototype.trimCommonLeft(str0[, str1[, ...]])`\n\n## Tests\n\nBefore running tests make sure you've installed project with dev dependiencies\n`npm install --dev`\n\n\t$ npm test\n",
  "readmeFilename": "README.md",
  "_id": "es5-ext@0.7.1",
  "_from": "es5-ext@0.7.x"
}
